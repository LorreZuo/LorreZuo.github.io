<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lorrezuo.github.io/</id>
    <title>LorreZuo</title>
    <updated>2020-03-08T04:26:20.125Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lorrezuo.github.io/"/>
    <link rel="self" href="https://lorrezuo.github.io/atom.xml"/>
    <subtitle>&amp;emsp; &amp;emsp; &amp;emsp; 的秘密小基地</subtitle>
    <logo>https://lorrezuo.github.io/images/avatar.png</logo>
    <icon>https://lorrezuo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, LorreZuo</rights>
    <entry>
        <title type="html"><![CDATA[全面解析ARP（含4种ARP报文分析与应用场景分析）]]></title>
        <id>https://lorrezuo.github.io/post/quan-mian-jie-xi-arphan-4-chong-arp-bao-wen-fen-xi-yu-ying-yong-chang-jing-fen-xi/</id>
        <link href="https://lorrezuo.github.io/post/quan-mian-jie-xi-arphan-4-chong-arp-bao-wen-fen-xi-yu-ying-yong-chang-jing-fen-xi/">
        </link>
        <updated>2020-03-08T02:57:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="arp">ARP</h1>
<p>ARP协议全名，Address Resolution Protocol （地址解析协议）<br>
作用是将<strong>IP逻辑地址</strong>映射成<strong>MAC物理地址</strong><br>
ARP的种类常见的有标准ARP，GARP（无故/免费ARP），RARP反向ARP，代理ARP。<br>
当然还有一些其他场景下的ARP，如帧中继环境下的IARP（Inverse ARP）、串行线上的SLARP（serial line ARP）和FDDI/TokenRing中的SNAP类型的ARP等等。<br>
但是本文只讲述常见的ARP类型。我们将通过抓取报文和以及分析报文字段来对常见ARP的彻头彻尾学习。</p>
<h2 id="arp的使用场景">ARP的使用场景</h2>
<p>我们的数据通信都会遵循OSI参考模型模型，将不同功能的层级划分，解耦，各自独立运行，但也要上下层进行配合。</p>
<table>
<thead>
<tr>
<th style="text-align:left">OSI分层</th>
<th style="text-align:center">源标识</th>
<th style="text-align:right">目标识</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">4层传输层</td>
<td style="text-align:center">源端口</td>
<td style="text-align:right">目的端口</td>
</tr>
<tr>
<td style="text-align:left">3层网络层</td>
<td style="text-align:center">源IP</td>
<td style="text-align:right">目的IP</td>
</tr>
<tr>
<td style="text-align:left">2层数据链路层</td>
<td style="text-align:center">源MAC</td>
<td style="text-align:right">目的MAC</td>
</tr>
</tbody>
</table>
<p>在通过IPv4访问别人的时候，我们从来没问过对方的MAC地址，因为跨越了子网段的传输，我们都会去寻找网关进行路由递归，不必在乎对方的MAC地址。而在同一个子网段内，则有ARP协议帮我们完成这一件关联IP和MAC的小事。</p>
<p>在主动发送数据给对方时，检测到IPv4的源和目的地址在一个子网段内，数据将进行逐层封装，但在封装到2层时，如果不知道对方的MAC地址，就会导致数据帧无法继续封装。<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200305113307.png" alt="" loading="lazy"><br>
这时候，就需要ARP协议的帮忙。ARP采用一种问答的方式去询问2层的目的MAC地址，来进行完整数据封装。<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200305124552.png" alt="" loading="lazy"></p>
<p>在PC-A拿到了PC-B的MAC地址后，就可以继续进行2层数据的封装。<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200305130403.png" alt="" loading="lazy"></p>
<p>这么看，好像每次发送数据前都要进行一个MAC地址的查询，有点耗时，又有点占用资源。<br>
我们先来看一下，这个ARP的信息在设备上如何储存了。<br>
Cisco IOS路由器通过键入：show arp 查看arp表信息：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200305125042.png" alt="" loading="lazy"><br>
这个ARP表，第一列是IP协议，第二列是IPv4地址，第三列是一个时间单位，第四列是MAC的硬件地址，第五列是ARP类型，第六列是接口信息。<br>
在过了一分钟后，再次进行查看。<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200305125639.png" alt="" loading="lazy"><br>
第三列的时间单位那一列，变了，增长了1(min)。这一列的单位值是分钟。<br>
关于这一列，它有很多种名字，如：老化时间、超时时间、过期时间。<br>
但是它的作用只有一个：有限时的缓存ARP信息，也就是保存一段时间的IP到MAC的映射关系。<br>
并且这个时间的数值会随着ARP数据包的交互，进行“重置”。<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200305133936.png" alt="" loading="lazy"><br>
在主动请求这个ARP或间接收到这个MAC地址发送的2层ARP广播报文后，我们的ARP缓存时间都会刷新重置。<br>
那这个缓存的最大生存时间是多久？</p>
<h2 id="arp缓存周期">ARP缓存周期</h2>
<h3 id="在windows平台上缓存时间">在Windows平台上缓存时间：</h3>
<p>通过cmd键入</p>
<pre><code>netsh interface ipv4 show interface [网卡名称]
</code></pre>
<p><img src="q6bf2rjmf.bkt.clouddn.com/20200305151639.png" alt="" loading="lazy"><br>
可以看到可访问时间（ReachableTime） 为33500毫秒，下面还有一个值基本可访问时间（BaseReachableTime）为30000毫秒。<br>
这里有一个公式：<br>
<strong>Reachable Time = BaseReachable Time x（MIN_RANDOM_FACTOR和MAX_RANDOM_FACTOR之间的随机值）</strong><br>
<strong>公式中：</strong><br>
MIN_RANDOM_FACTOR=0.5<br>
MAX_RANDOM_FACTOR=1.5</p>
<p>默认的BaseReachableTime是30秒，所以Reachable Time的取值范围在15秒到45秒之间。</p>
<h3 id="在linux平台上缓存时间">在Linux平台上缓存时间：</h3>
<p>可以通过查看内核虚拟文件</p>
<pre><code>cat /proc/sys/net/ipv4/neigh/default/base_reachable_time
</code></pre>
<p><img src="q6bf2rjmf.bkt.clouddn.com/20200305170615.png" alt="" loading="lazy"><br>
可以看到和Windows一样，也是30秒。当然Linux也是存在有一个Factor因数，而这个因数的范围值一样也是0.5-1.5之间的随机值<br>
所以Linux系统下ARP默认的缓存时间也是30-45秒之间。</p>
<h3 id="在cisco-ios平台上缓存时间">在Cisco IOS平台上缓存时间：</h3>
<p>在特权模式下通过输入如下命令</p>
<pre><code>show int [接口号]
</code></pre>
<p><img src="q6bf2rjmf.bkt.clouddn.com/20200305133826.png" alt="" loading="lazy"><br>
可以看到思科IOS平台上ARP的缓存时间为4小时。<br>
和其他平台一样，为了防止大量的ARP信息在同一时间进行同步，思科IOS平台也会追加一个随机值时间，随机范围在0秒到30分钟之间。</p>
<p>通过键入下列命令查看这个追加后的缓存时间：</p>
<pre><code>show arp detail
</code></pre>
<figure data-type="image" tabindex="1"><img src="q6bf2rjmf.bkt.clouddn.com/20200305162838.png" alt="" loading="lazy"></figure>
<h2 id="arp实现">ARP实现</h2>
<h3 id="标准arp实现">标准ARP实现</h3>
<p>我们再回到ARP本身的逻辑上来讨论，ARP的请求是一个2层目的MAC地址为全F的2层广播。</p>
<figure data-type="image" tabindex="2"><img src="q6bf2rjmf.bkt.clouddn.com/20200305171007.png" alt="" loading="lazy"></figure>
<p>这个2层MAC地址为全F的数据帧会广播泛洪出去。</p>
<figure data-type="image" tabindex="3"><img src="q6bf2rjmf.bkt.clouddn.com/20200305164443.png" alt="" loading="lazy"></figure>
<p>根据交换机的转发原理，交换机收到这种广播报文，就会转发给所有广播域成员接口。</p>
<figure data-type="image" tabindex="4"><img src="q6bf2rjmf.bkt.clouddn.com/20200305164540.png" alt="" loading="lazy"></figure>
<p>就这样，ARP的请求报文让所有广播域内成员都接收到了。<br>
每个收到这个ARP请求的终端，都会检测ARP查询请求中的目的IP是否为自己所有。<br>
如果是，就对这个ARP请求做出回复。</p>
<figure data-type="image" tabindex="5"><img src="q6bf2rjmf.bkt.clouddn.com/20200305164840.png" alt="" loading="lazy"></figure>
<p>需要注意的是，ARP的回复，是一种单播的。</p>
<figure data-type="image" tabindex="6"><img src="q6bf2rjmf.bkt.clouddn.com/20200305170334.png" alt="" loading="lazy"></figure>
<p>因为在网络协议设计的初期，带宽资源还不是那么很富裕，设计的时候大家都很克制，能合并信息就合并，能不用广播就尽量单播，把带宽资源节省出来。</p>
<p>再来让我们看看ARP的请求报文中都有什么字段<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200305171218.png" alt="" loading="lazy"></p>
<p>可以看到请求ARP报文中字段不多，各个字段的意义则如下表</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hardware type：</td>
<td>硬件类型，标识链路层协议</td>
</tr>
<tr>
<td>Protocol type：</td>
<td>协议类型，标识网络层协议</td>
</tr>
<tr>
<td>Hardware size：</td>
<td>硬件地址大小，识别MAC地址长度，6字节48bits</td>
</tr>
<tr>
<td>Protocol size：</td>
<td>协议地址大小，标识ip地址长度，4字节32bits</td>
</tr>
<tr>
<td>Opcode：</td>
<td>操作代码，标识ARP数据包类型，奇数表示请求，偶数表示回复</td>
</tr>
<tr>
<td>Sender Mac address：</td>
<td>发送者的Mac</td>
</tr>
<tr>
<td>Sender IP address：</td>
<td>发送者IP</td>
</tr>
<tr>
<td>Target Mac address：</td>
<td>目的MAC</td>
</tr>
<tr>
<td>Target IP address：</td>
<td>目的IP地址</td>
</tr>
</tbody>
</table>
<p>可以看到ARP请求报文中的Target Mac address字段（目的MAC地址） ，为全0。<br>
因为发送方不知道这个MAC要填什么，所以预留为全0，发送方于是将它空余出来，期待这个Target IP address（目的IP地址），收到这个ARP请求后将空的MAC地址补充全。</p>
<p>让我们来看看是不是这样，ARP的回复报文如下：</p>
<figure data-type="image" tabindex="7"><img src="q6bf2rjmf.bkt.clouddn.com/20200305171957.png" alt="" loading="lazy"></figure>
<p>的确是这样，我们ARP请求报文中的Target IP address （目的IP地址）为10.1.1.53，这时候发现ARP回复报文中，Sender IP address（发送者IP地址）也是这个10.1.1.53，说明，这个回复就是对应的刚才的ARP请求。<br>
这时再注意一下，这个Sender MAC address（发送者MAC地址） 不再是全0了。它被填充上了，填充的值就是这个终端这个IPv4地址所对应的MAC硬件地址。</p>
<p>我们在服务端验证一下：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200305172946.png" alt="" loading="lazy"></p>
<p>这就是标准ARP的流程，通过广播发送ARP请求，单播收到ARP回复，在请求中通过将Target MAC address 置位为全0，等待Target IP address 收到请求后进行填充回复。以此来绑定ARP表信息。</p>
<h3 id="rarp实现">RARP实现</h3>
<p>RARP：Reverse ARP，直译为反向的ARP。刚才我们标准的ARP，是通过请求中携带目的IP地址，但是把目的MAC地址置位全0，期待回复。<br>
那既然RARP叫反向ARP，那么它应该就是通过在请求中把目的MAC填充，但是不填充目的IP地址实现吧。<br>
让我们来看一下是否如我们所猜想：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200305173620.png" alt="" loading="lazy"><br>
可以看到红色框中，2层目的MAC地址，依然是个广播地址。<br>
篮色框中是发送者的MAC地址，但是在ARP的报文中，我们好像发现了点不一样的东西，Sender MAC address（发送者的MAC地址）是和2层的源MAC一致，这是正确的没任何问题，但是为什么绿色框中的Target MAC address（目的MAC地址）也是这个？<br>
再让我们仔细看一下，怎么Sender IP address 也是全0。和我们所猜想的只需要将RARP的Target IP address（目的IP）置位为全0，好像不太一样？它竟然将发送者的IP也设置为全0，同时它的发送者MAC地址和目的MAC地址竟然都是自己。</p>
<p>这和我们的RARP的使用场景有关，RARP的使用场景是无盘工作站等情况，无盘工作站在开机的时候只知道自己的MAC地址，而不知道IP地址，它通过发送RARP请求，期待RARP服务器做出应答，来拿到它的IP地址。</p>
<p>那让我们来看看RARP的应答报文：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200305174730.png" alt="" loading="lazy"><br>
黄色框中告知我们，这是一个回复报文。<br>
蓝色框中则是刚才的RARP请求的发送者的MAC地址。<br>
绿色框原本为0的目的IP，在这里被填充上了IPv4地址。<br>
以此我们就可以知道这个红色框中的MAC地址和IPv4地址就是RARP服务器的IPv4地址和它的MAC地址了。</p>
<h3 id="garp实现">GARP实现</h3>
<p>聊完了正向的标准ARP，和特殊场景下使用的反向RARP，我们再来看点不一样的ARP。<br>
GARP：Gratuitous ARP，直译为无故ARP，我们也叫它“免费”ARP。<br>
为什么它也叫免费ARP，因为并没有人发送请求，他就会主动发送ARP的“回复”。<br>
那么它是把这个“回复”发给谁的呢？<br>
我们来看思科IOS平台发送的GARP报文格式：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200305183721.png" alt="" loading="lazy"><br>
蓝色框中表示这是个广播报文，同时ARP报文中的目的MAC也是一个全F（这里注意：GARP的实现还有一种是填充全0，以及填充发送者自己的MAC地址，3种方式实现），因为目的地址是2层广播地址，广播域内终端都可以在2层收到这个广播数据，解封装后可以发现ARP信息里红色框中Sender IP address（发送者IP地址）和Sender MAC address（发送者的MAC地址）的对应映射关系。</p>
<p>那其他终端收到了这个ARP的意义何在呢，这个GARP可以直接更新掉收到它的终端上的ARP缓存表，这里要注意另一点：收到GARP的时候，会对ARP缓存表进行检测，但是只会对存在于自己缓存表中的条目进行刷新，如不存在，将不予理会。<br>
之前我们了解到了ARP缓存是有老化时间的，在老化时间到达之前，通过监听到那个MAC地址发送的ARP广播请求来对缓存表中的表项进行刷新操作。在没有收到这个MAC地址发送数据的时候，则直接通过老化时间的“耗尽”将其从ARP表项中删除，或缓存方主动发送ARP请求，如有应答则提前更新。<br>
而这个GARP，则是以另一种“发送方主动”的方式刷新掉所有广播域内其他终端上的关于这个IP和MAC的映射条目。<br>
那么它的应用场景是什么呢？<br>
首先它可以更新掉广播域内其他成员的ARP缓存表，那它在更换IP地址，更换MAC地址的时候，就有它的作用了。</p>
<p>更换IP的情况很常见，在终端更换IPv4地址后，我们的设备根据系统的不同，有的系统会先查询一下这个IP地址是否被占用，然后再发GARP，更新掉那些其他终端上可能存在的该IP和其他MAC对应的缓存记录。</p>
<p>那么更换MAC的情况是什么？<br>
我们网络健壮架构体系中，重要的部分一定会有一项叫做“高可靠性”（High Available HA），它是用冗余的方式解决了单点故障点。</p>
<p>在网络中统称叫做FHRP（first hop redundancy protocol）首跳荣冗余协议，具体协议如HSRP(Hot Standby Router Protocol)热备冗余路由协议和VRRP（Virtual Router Redundancy Protocol)虚拟路由冗余协议。当然还有另一种通过设备间多虚一的方式实现的高可用。</p>
<p>在系统中，我们叫它集群（Cluster），在Keepalived集群高可用解决方案中，也是使用了VRRP（虚拟路由冗余协议）。<br>
它通过让多台设备间使用同一个IP地址，但是同一时间只有一个MAC做应答，也就是主用的那台设备的MAC地址，来实现多高可用冗余。<br>
它在主备切换的时候，就是通过发送GARP，对其他广播域内终端进行主动刷新ARP缓存记录行为。<br>
如果不刷新掉，那么老的MAC地址在不可达之后，我们的数据封装将出现重大问题。数据包将发送给一个不可达/不再提供服务的MAC地址。</p>
<p>而GARP则提供了这种情况下的解决方案，让终端设备都更换ARP映射，替换成更新后的MAC地址，继续进行正确的封装。<br>
此外，我们的虚拟机在进行迁移的时候，IP地址不变，但是VM（Virtual Machine）虚拟机的网卡MAC地址会发生改变，也是通过GARP来实现。</p>
<p>让我们再回头来看看，GARP为什么叫无故ARP。怎么才能判断一个ARP是GARP。<br>
我们将通过报文+Wireshark分析来验证。<br>
这是一台Linux Centos7服务器发送的GARP。<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307151204.png" alt="" loading="lazy"><br>
可以看到红色框中Opcode是reply（2）类型。绿色框中和黄色框中的MAC地址是一样的，它是一种通过2层数据链路层目的地址为广播数据帧（蓝色框中），里面ARP请求者MAC和发送者MAC一样的方式来实现。<br>
紧接着这台Linux Centos7又发送了一个GARP。<br>
这次的Opcode是request（1）类型了。和上面的变化出现了，它绿色框中不再是发送者MAC地址了，它是全F填充。<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307151457.png" alt="" loading="lazy"><br>
上面两个图中ARP报文中的Target-Mac-address 有两种，全F的reply回复。和全0的request请求，好像区别在于opcode的不同。<br>
我们继续，再来看我们之前的思科IOS平台发送的GARP<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307151622.png" alt="" loading="lazy"><br>
它是reply的“回复方式”，发送给Target-MAC-address为全F。<br>
最后再来看一下另一种实现，通过Target-MAC-address 全0发送的request<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307160103.png" alt="" loading="lazy"><br>
以及全0发送的reply<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307160951.png" alt="" loading="lazy"></p>
<p>见了这么多GARP，那么GARP的共性是什么？<br>
GARP，是在2层数据链路层目的MAC地址为全F的二层广播，发送的ARP request请求和ARP reply回复。<br>
同时，GARP报头信息中的Sender-IP-address和Target-IP-address是一样的。<br>
当我们发现Sender-IP 和Target-IP 一样时，就可以判断那是一个GARP。<br>
所说的“无故”ARP，也就是这种“莫名其妙”的，ARP发送源是自己同时ARP目的地是自己的广播ARP。</p>
<p>各平台间GARP的实现方式：</p>
<table>
<thead>
<tr>
<th>GARP实现平台</th>
<th>opcode类型</th>
<th>Target MAC address</th>
</tr>
</thead>
<tbody>
<tr>
<td>Centos-7</td>
<td>reply</td>
<td>发送者的MAC</td>
</tr>
<tr>
<td>Centos-7</td>
<td>request</td>
<td>全F</td>
</tr>
<tr>
<td>Cisco-IOS</td>
<td>reply</td>
<td>全F</td>
</tr>
</tbody>
</table>
<p>经测试，Windows平台个人使用系统并不会主动发布关于自己的GARP。</p>
<h3 id="arp-proxy实现">ARP-proxy实现</h3>
<p>正常APR，反向ARP，以及不正常ARP（无故ARP），我们都认识和了解了。他们虽然叫法不同，各自功能不同，但是也有共同点，这个共同点在于ARP请求中，他们的目的MAC，都是广播。<br>
既然是广播，那么就是说所有在同一个广播域的成员都可以收到。<br>
既然可以收到，会不会出现一个“好心人”呢？帮忙回复ARP信息呢？<br>
这个“好心人”是有的，它叫做ARP-proxy ARP代理。<br>
ARP代理通过监听网络中发送的ARP请求，进行酌情回复，如果开启了local proxy ARP，则也会代替回复和接口子网段处于相同广播域的请求。<br>
这是一种什么情况呢？Wireshark获取的报文会给我们一个解答。<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307174302.png" alt="" loading="lazy"><br>
可以看到红色框中，ARP请求中询问的IPv4地址是10.1.1.50，但是我们可以发现接连收到了两条回复，一个MAC地址是蓝色框中的aa:bb:cc:00:68:00，另一个MAC地址是绿色框中的00:50:08:00:04:00。<br>
那么谁才是那个真的。<br>
我们来看一下这台开启了ARP-proxy的路由器上的ARP表。<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307175624.png" alt="" loading="lazy"><br>
在ARP表中，如果age为“-”（红色框中部分），代表了永不超时，同时后面interface 接口也告诉了我们，这条记录是对应的哪个接口地址。绿色框中则是真正的10.1.1.50的ARP缓存记录，而这个蓝色框好像就是刚才那个两个ARP回复中的第一个，它为什么会这么做呢？<br>
我们来看一下这台路由器的接口上的ARP配置。<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307175928.png" alt="" loading="lazy"><br>
它开启了Local Proxy ARP（红色框中），同时它的ARP proxy也是开启的（蓝色框中），这就是为什么刚才我们在一个广播域内会发现有两个IP一样，MAC地址不一样的ARP回复。<br>
但是你不用担心，默认Local proxy arp是不会开启的，除了特殊使用场景，一般也不会使用。<br>
那么撇开Local proxy ARP不谈，我们的Proxy ARP是干嘛的呢？<br>
ARP proxy在开启后，会从每个接口监听来自arp请求的广播报文，当他发现这个ARP请求的Target IP address在自己的路由表中，就会主动代理回复，内容是回复这个IPv4地址的MAC地址是自身收到这个ARP请求的接口上的MAC地址。<br>
ARP-proxy展示环境如下：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307214659.png" alt="" loading="lazy"><br>
绿色框中为同一个广播域，蓝色框和红色框也分别为一个广播域（因为路由器接口分割广播域）。<br>
R2路由器关闭了路由功能，同时也没有默认路由。<br>
R1和R3之间有互相路由指向，确保R1可以访问R4，R3可以访问R2。<br>
R4则是写了默认路由指向e0/0接口，而非下一跳方式的路由。<br>
同时R1和R3的接口默认开启了ARP-proxy。<br>
中间的SW1交换机则是傻瓜式二层交换机。</p>
<p>针对环境，用表格的方式将MAC和IPv4地址绑定关系先罗列出来：</p>
<table>
<thead>
<tr>
<th style="text-align:center">IPv4</th>
<th style="text-align:center">MAC</th>
<th style="text-align:right">Device</th>
<th style="text-align:right">interface</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">10.1.1.53</td>
<td style="text-align:center">aa:bb:cc:00:38:00</td>
<td style="text-align:right">R2</td>
<td style="text-align:right">e0/0</td>
</tr>
<tr>
<td style="text-align:center">10.1.1.54</td>
<td style="text-align:center">aa:bb:cc:00:68:00</td>
<td style="text-align:right">R1</td>
<td style="text-align:right">e0/0</td>
</tr>
<tr>
<td style="text-align:center">20.1.1.1</td>
<td style="text-align:center">aa:bb:cc:00:68:10</td>
<td style="text-align:right">R1</td>
<td style="text-align:right">e0/1</td>
</tr>
<tr>
<td style="text-align:center">20.1.1.2</td>
<td style="text-align:center">aa:bb:cc:00:78:00</td>
<td style="text-align:right">R3</td>
<td style="text-align:right">e0/0</td>
</tr>
<tr>
<td style="text-align:center">30.1.1.1</td>
<td style="text-align:center">aa:bb:cc:00:78:10</td>
<td style="text-align:right">R3</td>
<td style="text-align:right">e0/1</td>
</tr>
<tr>
<td style="text-align:center">30.1.1.2</td>
<td style="text-align:center">aa:bb:cc:00:88:00</td>
<td style="text-align:right">R4</td>
<td style="text-align:right">e0/0</td>
</tr>
</tbody>
</table>
<p>R2的ARP表:<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307221803.png" alt="" loading="lazy"><br>
R1的ARP表：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307222521.png" alt="" loading="lazy"><br>
R3的ARP表：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307222038.png" alt="" loading="lazy"><br>
R4的ARP表：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307222121.png" alt="" loading="lazy"></p>
<p>我们将在R2上主动ping路由器R4，测试ARP proxy代理现象。<br>
首先ping是一个一去一回的过程，在网络发展的初期，我们的网络搭建好之后，并无法确定是否可用，此时我们就有了ICMP（网际控制信息协议），工具就是ping（packet internet Grouper），和潜水艇的主动声纳类似，通过发送请求，收到对方回复得知网络状态。<br>
同时ICMP报文在3层之上，需要2和3层封装的支撑才能封装发送。</p>
<p>此时<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307222352.png" alt="" loading="lazy"><br>
我们惊奇的发现，这个icmp探测竟然是可达的。<br>
让我们再来查看一下ARP表信息:<br>
R2在ping通后的ARP表：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307223453.png" alt="" loading="lazy"><br>
R1在ping通后的ARP表：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307223206.png" alt="" loading="lazy"><br>
R3在ping通后的ARP表：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307223552.png" alt="" loading="lazy"><br>
R4在ping通后的ARP表：<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307224818.png" alt="" loading="lazy"></p>
<p>我们可以看到ARP表都多了好多信息，从我们流量的起点R2开始看，R2有了一条IPv4地址是30.1.1.2的ARP缓存记录，但是这明显和R2的ipv4地址不是一个广播域的子网段。那这个MAC地址是谁呢？我们继续看R1，发现原来这个MAC地址它在R1上，它属于R1的Ethernet0/0接口，也就是说我们R2访问30.1.1.2的流量，最终ARP解析出的MAC地址是R1设备的e0/0接口MAC地址。<br>
那我们再看R1的ARP表，没有任何问题，符合它的转发逻辑，根据路由表，解析下一跳地址的MAC地址，再进行封装数据帧。<br>
我们再来看R3，和R1一样，他的ARP表也完全符合转发逻辑。<br>
接下来关注R4，R4是写了默认路由为出接口的设备（并非默认路由指向下一跳IP的方式），它也多了一条ARP，多的竟然是我们的R2设备上的IPv4地址，但是这里要注意！这条关于10.1.1.53的IPv4地址的ARP缓存记录的MAC地址是他的上一层设备的，也就是R3的e0/1接口的MAC地址。</p>
<p>至此，线索已经全部得到，我们将打开wireshark一探究竟：<br>
这是R2发送的ARP请求。<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307225601.png" alt="" loading="lazy"></p>
<p>这是R4发送的ARP请求。<br>
<img src="q6bf2rjmf.bkt.clouddn.com/20200307225713.png" alt="" loading="lazy"></p>
<p>真相就是红色框中的MAC地址所在的接口（均为开启了ARP代理的思科IOS平台设备接口），对我们的ARP请求进行了代理式回复。</p>
<p>同时，我们的终端设备在“无路由功能、无默认路由”的情况，以及“默认路由是指向给下一跳”的时候，访问非同一子网段的目的地址时，都会发送对目的IPv4地址的ARP请求。</p>
<h2 id="复盘">复盘：</h2>
<p>ARP 是有目的IPv4地址，却没有目的的MAC地址，发送ARP广播请求，期待要访问的IPv4目的主机收到后，填充MAC地址进行回复。</p>
<p>RARP 是有自身的MAC地址，却没有自身的IPv4地址，发送广播请求，期待RARP服务器收到请求后，将自身所需的IPv4信息填充后，回复给这台没有IPv4地址的设备。</p>
<p>GARP 主要是主动刷新IPv4子网段内其他设备的ARP缓存表信息。在同一个IPv4逻辑地址有多个MAC的时候（冗余HA环境下），起重大作用。</p>
<p>ARP-proxy 则是通过监听ARP广播的请求，检索请求的地址是否在自身的IP路由表中，如果表内有目的IPv4的路由信息，则代替回复ARP请求。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Alpine安装和介绍]]></title>
        <id>https://lorrezuo.github.io/post/alpine-an-zhuang-he-jie-shao/</id>
        <link href="https://lorrezuo.github.io/post/alpine-an-zhuang-he-jie-shao/">
        </link>
        <updated>2020-02-25T04:00:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="alpine使用日记">alpine使用日记</h1>
<p>下载alipine 镜像文件<br>
<a href="https://www.alpinelinux.org/downloads/">官网</a></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>standard</td>
<td>标准</td>
</tr>
<tr>
<td>Extended</td>
<td>拓展，适用于服务器和路由器</td>
</tr>
<tr>
<td>NETBOOT</td>
<td>适用于网络开启</td>
</tr>
<tr>
<td>最小根文件系统</td>
<td>用于容器和最小chroots</td>
</tr>
<tr>
<td>虚拟化</td>
<td>瘦下来的内核，针对虚拟化系统进行了优化</td>
</tr>
<tr>
<td>XEN</td>
<td>支持XEN hypervisor</td>
</tr>
<tr>
<td>RASPBERRY PI</td>
<td>包括RASPBERRY内核</td>
</tr>
<tr>
<td>ARM版本</td>
<td>包括uroot引导程序 支持armhf和aarch64</td>
</tr>
</tbody>
</table>
<h2 id="setup-alpine-进入到交互式安装模式">setup-alpine 进入到交互式安装模式</h2>
<p>开机后登陆root账号，默认无密码<br>
<strong>很重要，挂载之后，需要用该命令进行在硬盘上安装</strong><br>
镜像站21是清华镜像站，38是上海交通大学镜像站<br>
键盘选择us-&gt;us，<br>
根据情况选择ip，dns，hostname等<br>
然后是去选择Asia-&gt;Shanghai<br>
安装openssh和NTP的client端<br>
<strong>然后重点，选择分区安装，看硬盘挂在情况，默认sda，一定要选很重要</strong><br>
然后键入<strong>sys</strong>进入硬盘安装，直至看到installation is complete，随后可以reboot，去掉CD/DVD(IDE)挂载。</p>
<h2 id="apk包管理">apk包管理</h2>
<p>alpine使用apk进行包管理，自动解决依赖关系</p>
<pre><code>apk update
//更新索引
</code></pre>
<p>update命令会从各个镜像源列表下载APKINDEX.tar.gz并存储到本地缓存，一般在/var/cache/apk/(Alpine在该目录下)、 /var/lib/apk/ 、/etc/apk/cache/下</p>
<pre><code>apk add [packagename]
//下载软件包，可选项
//--no-cache 不缓存
//--repository 指定仓库
//--allow-untrusted 接受不受信的软件包
</code></pre>
<h3 id="官方镜像列表">官方镜像列表：</h3>
<pre><code>官方镜像列表：http://rsync.alpinelinux.org/alpine/MIRRORS.txt镜像源配置
</code></pre>
<p>可以安装指定版本</p>
<pre><code>apk add openssh=8.1_p1-r0
apk add 'openssh&lt;8.1'
apk add 'openssh&gt;8.0'
//可以使用大于 等于 小于
</code></pre>
<p>移除软件，不是remove</p>
<pre><code>apk del openssh
//删除openssh
</code></pre>
<p>更新已安装的软件包</p>
<pre><code>apk upgrade
//更新软件和内核
apk add --upgrade openssh
//也可以单独更新指定软件
</code></pre>
<p>搜索软件包，支持通配符</p>
<pre><code>apk search [packagename]
//搜索软件包
apk search -v [packagename]
//搜索的同时查看描述
</code></pre>
<p>查看已经安装的软件包</p>
<pre><code>apk info
//查看已经安装的软包
apk info -a openssh
//列出完整端openssh的软件包信息
apk info --who-owns /sbin/ifup
//查询这个进程是哪个软件包安装的
</code></pre>
<h3 id="ssh服务注意事项">ssh服务注意事项</h3>
<p>默认ssh不开启root登陆</p>
<p>vi /etc/ssh/sshd_config找到#PermitRootLogin 更改为yes</p>
<pre><code>sed -i &quot;s/#PermitRootLogin.*/PermitRootLogin yes/g&quot; /etc/ssh/sshd_config
</code></pre>
<h2 id="管理init系统">管理init系统</h2>
<p>alpine通过OpenRCinit系统管理init</p>
<pre><code>rc-update add docker [boot]
//开机启动docker [boot等级]
</code></pre>
<pre><code>rc-status docker
//查看运行等级
</code></pre>
<pre><code>rc-service docker start|stop|restart
//服务管理，启动服务，停止服务，重启服务
</code></pre>
<p>alpine的运行等级</p>
<ul>
<li>default</li>
<li>sysinit</li>
<li>boot</li>
<li>single</li>
<li>reboot</li>
<li>shutdown</li>
</ul>
<h2 id="alpine-设置ip">Alpine 设置IP</h2>
<p><code>/etc/network/interfaces</code>是配置文件，重启网络服务是<code>/etc/init.d/networking restart</code>或<code>rc-service networking restart</code></p>
<p>更改配置文件</p>
<pre><code>vi /etc/network/interfaces
auto lo
iface lo inet loopback

auto eth0
iface eth0 net static 
    address 172.16.0.1
    netmask 255.255.255.0
    gateway 172.16.0.254
auto eth1
iface eth1 net dhcp
    hostname demo
</code></pre>
<h3 id="开启ipv6支持">开启IPv6支持</h3>
<pre><code>modprobe
//模块加载
echo &quot;ipv6&quot; &gt;&gt;/etc/modules
</code></pre>
<h3 id="开启ipv6很重要">开启ipv6很重要</h3>
<p>如果是自动获取的地址，记得开启RA 路由通告。</p>
<pre><code>iface ethx inet manual
pre-up echo 1 &gt; /proc/sys/net/ipv6/conf/ethx/accept_ra
//在网卡开启前，开启RA路由通告（自动获取）
</code></pre>
<p>配置固定IPv6地址</p>
<pre><code>iface ethx inet static
    address 2001::2
    netmask /64
    gateway 2001::1
    pre-up echo 0 &gt; /proc/sys/net/ipv6/ethx/accept_ra
</code></pre>
<p>debian系统，pre-up</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>pre-up</td>
<td>在网卡开启前的动作</td>
</tr>
<tr>
<td>up</td>
<td>启动时的动作</td>
</tr>
<tr>
<td>post-up</td>
<td>启动后的动作</td>
</tr>
<tr>
<td>pre-down</td>
<td>启动前的动作</td>
</tr>
<tr>
<td>down</td>
<td>启动时的动作</td>
</tr>
<tr>
<td>post-down</td>
<td>启动后的动作</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2020冲鸭]]></title>
        <id>https://lorrezuo.github.io/post/2020-chong-ya/</id>
        <link href="https://lorrezuo.github.io/post/2020-chong-ya/">
        </link>
        <updated>2020-01-14T06:03:58.000Z</updated>
        <content type="html"><![CDATA[<h5 id="flag">FLAG</h5>
<p>2020给自己立几个FLAG，巩固自己技能，做培训课程，写博客。</p>
]]></content>
    </entry>
</feed>